import sqlite3
import random
from faker import Faker


# Установите faker если нет: pip install faker

def create_connection(db_file):
    """ Создать соединение с SQLite базой данных """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        print(f"Подключено к SQLite версии {sqlite3.version}")
        return conn
    except sqlite3.Error as e:
        print(e)
    return conn


def populate_music_terms(conn, num_terms=40):
    """ Заполнить таблицу случайными музыкальными терминами """
    fake = Faker()

    music_terms = [
        ("Аккорд", "Сочетание трёх или более звуков, взятых одновременно"),
        ("Арпеджио", "Поочерёдное исполнение звуков аккорда"),
        ("Бемоль", "Знак понижения звука на полутон"),
        ("Вибрато", "Периодическое изменение высоты звука"),
        ("Гамма", "Последовательность звуков в пределах октавы"),
        ("Диез", "Знак повышения звука на полутон"),
        ("Канон", "Музыкальная форма с имитацией мелодии"),
        ("Лад", "Система взаимоотношений звуков"),
        ("Легато", "Связное исполнение звуков"),
        ("Метроном", "Прибор для точного определения темпа"),
        ("Октава", "Интервал в 8 ступеней"),
        ("Партитура", "Нотная запись многоголосного произведения"),
        ("Стаккато", "Отрывистое исполнение звуков"),
        ("Темп", "Скорость исполнения музыкального произведения"),
        ("Фермата", "Знак удлинения звука"),
        ("Флажолет", "Приём игры, дающий звук-обертон"),
        ("Хроматика", "Последовательность полутонов"),
        ("Цезура", "Момент расчленения в музыкальной фразе"),
        ("Штрих", "Способ извлечения звука"),
        ("Юнисон", "Одновременное звучание одинаковых звуков"),
        ("Адажио", "Медленный темп"),
        ("Аллегро", "Быстрый темп"),
        ("Анданте", "Умеренный темп"),
        ("Бас", "Самый низкий мужской голос"),
        ("Вокализ", "Пение без слов"),
        ("Глиссандо", "Плавное скольжение от одного звука к другому"),
        ("Диссонанс", "Негармоничное сочетание звуков"),
        ("Кантилена", "Певучая мелодия"),
        ("Консонанс", "Гармоничное сочетание звуков"),
        ("Крещендо", "Постепенное усиление звука"),
        ("Либретто", "Текст оперы или оперетты"),
        ("Меццо-сопрано", "Средний женский голос"),
        ("Модуляция", "Переход в другую тональность"),
        ("Облигато", "Обязательная партия инструмента"),
        ("Орнаментика", "Украшения в музыкальном произведении"),
        ("Пиццикато", "Щипок струны пальцем"),
        ("Реприза", "Повторение музыкального фрагмента"),
        ("Сопрано", "Высокий женский голос"),
        ("Тенор", "Высокий мужской голос"),
        ("Тремоло", "Быстрое повторение одного звука"),
        ("Унисон", "Одновременное исполнение одинаковых звуков"),
        ("Финал", "Заключительная часть произведения"),
        ("Фуга", "Полифоническое произведение с имитацией темы"),
        ("Хор", "Коллектив певцов"),
        ("Цикл", "Серия самостоятельных произведений"),
        ("Этюд", "Инструментальная пьеса для развития техники"),
        ("Ямб", "Двудольный стихотворный размер")
    ]

    sql = '''INSERT INTO music_terms(m_term, description, author)
             VALUES(?, ?, ?)'''

    check_sql = '''SELECT COUNT(*) FROM music_terms WHERE m_term = ?'''

    cursor = conn.cursor()

    added_terms = set()
    attempts = 0
    max_attempts = num_terms * 2  # Максимальное количество попыток

    while len(added_terms) < num_terms and attempts < max_attempts:
        term, description = random.choice(music_terms)

        # Проверяем, нет ли уже такого термина в базе
        cursor.execute(check_sql, (term,))
        count = cursor.fetchone()[0]

        if count == 0 and term not in added_terms:
            author = fake.name() if random.random() > 0.3 else None  # 70% вероятность наличия автора
            cursor.execute(sql, (term, description, author))
            added_terms.add(term)

        attempts += 1

    conn.commit()
    print(f"Добавлено {len(added_terms)} уникальных музыкальных терминов из {num_terms} запрошенных")
    if len(added_terms) < num_terms:
        print("Предупреждение: не удалось добавить все запрошенные термины из-за дубликатов")


def main():
    database = "data/MyEducationProject.db"  # Путь к вашей SQLite базе Django

    # Создаем соединение с базой данных
    conn = create_connection(database)
    if conn is not None:
        populate_music_terms(conn)
        conn.close()
    else:
        print("Ошибка! Не удалось установить соединение с базой данных.")


if __name__ == '__main__':
    main()